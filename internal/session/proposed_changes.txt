Here are the changes needed to implement the /debug command:

1. Add LatestResponse to Session struct in session/manager.go:
```go
type Session struct {
    // ... existing fields ...
    LatestResponse string `json:"latest_response"` // Latest raw JSON response from Claude
}
```

2. Add method to update latest response in session/manager.go:
```go
// UpdateLatestResponse stores the latest Claude response JSON
func (m *Manager) UpdateLatestResponse(sessionID string, response string) error {
    m.mu.Lock()
    defer m.mu.Unlock()

    session, exists := m.sessions[sessionID]
    if !exists {
        return fmt.Errorf("session %s not found", sessionID)
    }

    session.LatestResponse = response
    return nil
}

// GetLatestResponse retrieves the latest Claude response JSON
func (m *Manager) GetLatestResponse(sessionID string) (string, error) {
    m.mu.RLock()
    defer m.mu.RUnlock()

    session, exists := m.sessions[sessionID]
    if !exists {
        return "", fmt.Errorf("session %s not found", sessionID)
    }

    if session.LatestResponse == "" {
        return "", fmt.Errorf("no response available")
    }

    return session.LatestResponse, nil
}
```

3. Modify claude/executor.go to store raw JSON:
```go
// ExecuteClaudeCode changes:
    // After parsing JSON response
    responseJSON := stdout.String()
    var response ClaudeCodeResponse
    if err := json.Unmarshal([]byte(responseJSON), &response); err != nil {
        // ... error handling ...
    }
    // Store raw JSON
    if err := e.sessionManager.UpdateLatestResponse(sessionID, responseJSON); err != nil {
        e.logger.Error("Failed to store response JSON", zap.Error(err))
        // Non-fatal error, continue
    }
```

4. Add /debug command handler to bot/service.go:
```go
// In handleSlashCommands switch:
    case "/debug":
        response = s.handleDebugSlashCommand(userID, channelID, text)

// Add new handler:
func (s *Service) handleDebugSlashCommand(userID, channelID, text string) string {
    // Get session
    userSession, err := s.sessionManager.GetOrCreateSession(userID, channelID)
    if err != nil {
        return fmt.Sprintf("❌ Failed to get session: %v", err)
    }

    // Get latest response
    rawJSON, err := s.sessionManager.GetLatestResponse(userSession.ID)
    if err != nil {
        return fmt.Sprintf("❌ Failed to get debug info: %v", err)
    }

    // Pretty print JSON
    var prettyJSON bytes.Buffer
    if err := json.Indent(&prettyJSON, []byte(rawJSON), "", "    "); err != nil {
        return fmt.Sprintf("❌ Failed to format JSON: %v", err)
    }

    return fmt.Sprintf("```json\n%s\n```", prettyJSON.String())
}
```

These changes will:
1. Store raw JSON responses in session state
2. Add /debug command to display the JSON
3. Format JSON nicely with proper indentation
4. Show response in a code block with JSON syntax highlighting

Would you like me to proceed with implementing these changes?